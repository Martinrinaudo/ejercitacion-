__author__ = 'Martin'
'''
Una empresa dedicada al alquiler de cabañas de veraneo desea almacenar la información referida a los n alquileres de la temporada estival en un arreglo de registros (cargar n por teclado).

Por cada alquiler, se pide guardar el DNI de la persona que hizo la reserva, monto del alquiler y un código entre 0 y 9 que indica el tipo de cabaña alquilada.

Se pide desarrollar un programa en Python que permita:

Cargar el arreglo pedido (validar tipo de cabaña).
Trasladar a un archivo los alquileres que registraron un monto mayor a x, siendo x un valor pasado por parámetro.
Usando los datos del archivo, determinar y mostrar el monto total recaudado por cada tipo de cabaña posible.
'''
from Cabanas_registro import *
import random
import pickle
import os.path  # usas modulos individuales para manipular una ruta


def generar_vector(n):
    v = [None] * n
    for pos in range(n):
        dni = random.randint(1000000, 5000000)
        monto = random.uniform(1000, 7500)
        tipo = random.randrange(10)
        v[pos] = Cabanas(dni, monto, tipo)
    return v


def generar_archivo(vector, monto, archivo):
    arch = open(archivo, 'wb')
    for cabana in vector:
        if cabana.monto > monto:
            pickle.dump(cabana, arch)
    arch.flush()
    arch.close()

def leer_archivo(archivo):
    size = os.path.getsize(archivo)
    if size < 0:
        return None

    arch = open(archivo, 'rb')
    vc = [0] * 10
    while arch.tell() < size:
        cabana = pickle.load(arch)
        vc[cabana.tipo] += cabana.monto
    arch.close()
    return vc


def principal():
       menu = 'Menu de Opciones \n' \
           '===================================== \n' \
           '1 - Cargar Arreglo de Reservas \n' \
           '2 - Grabar Archivo por Monto \n' \
           '3 - Mostrar Archivo \n' \
           '4 - Salir\n' \
           'Ingrese la opcion: '

       nombre_archivo = 'reservas.dat'
       op = 0
       vector = []
       while op != 4:
           op = int(input(menu))
           if op == 1:
               n = int(input('Ingrese la cantidad de elementos a generar:'))
               vector = generar_vector(n)

           elif op == 2:
               monto = float(input('Ingrese le monto minimo para guardar:'))
               generar_archivo(vector, monto, nombre_archivo)

           elif op == 3:
               listado = leer_archivo(nombre_archivo)
               if not listado is None:
                   for i in range(len(listado)):
                       print('Tipo de Cabana', i,'recaudo $', listado[i])
           else:
               print('El archivo no tiene Registros')


principal()

////////////////////////////////////////////////////
REGISTROS:
__author__ = 'Martin'

class Cabanas:
    def __init__(self, dni, monto, tipo):
        self.dni = dni
        self.monto = monto
        self.tipo = tipo

def to_string(cabanas):
    cadena= 'Reserva por documento: {:10}'.format(cabanas.dni)
    cadena += 'Monto a pagar: ${:<10.2f}'.format(cabanas.monto)
    cadena += 'Tipo de cabana: ${:<5}'.format(cabanas.tipo)
    return cadena

